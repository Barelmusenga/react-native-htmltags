{"version":3,"sources":["components/navbar/Navbar.jsx","pages/home/HomePage.jsx","components/footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","src","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","HomePage","style","color","marginTop","Footer","currentYear","Date","getFullYear","App","exact","path","component","window","location","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b840c6a.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport \"./navbar.scss\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div className=\"container\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          <img src=\"/logo192.png\" width=\"50\" height=\"40\" alt=\"react-logo\" />\n          React Native Html Tags\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavAltMarkup\"\n          aria-controls=\"navbarNavAltMarkup\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div\n          className=\"collapse navbar-collapse justify-content-end\"\n          id=\"navbarNavAltMarkup\"\n        >\n          <NavLink className=\"nav-item nav-link\" to=\"/\">\n            Documentation\n          </NavLink>\n          <NavLink className=\"nav-item nav-link\" to=\"/github\" target=\"_blank\">\n            GitHub\n          </NavLink>\n          <NavLink className=\"nav-item nav-link\" to=\"/\">\n            Blog\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./HomePage.scss\";\nimport { Link } from \"react-router-dom\";\n\nconst HomePage = () => {\n  return (\n    <div className=\"home-page\">\n      <div className=\"jumbotron\">\n        <h1 className=\"title\">React Native Html Tags</h1>\n        <h3 className=\"sub-title\">\n          HTML Tags and Elements for your React Native Apps\n        </h3>\n        <div className=\"btn-links d-flex justify-content-between\">\n          <div className=\"btn btn-outline-light btn-lg\">\n            <Link to=\"/\" className=\"nav-item nav-link\">\n              Get Started\n            </Link>\n          </div>\n          <div className=\"btn btn-outline-light btn-lg\">\n            <Link to=\"/\" className=\"nav-item nav-link\">\n              Documentation\n            </Link>\n          </div>\n          <div className=\"btn btn-outline-light btn-lg\">\n            <Link className=\"nav-item nav-link\" to=\"/github\" target=\"_blank\">\n              GitHub\n            </Link>\n          </div>\n        </div>\n      </div>\n      <div className=\"intro\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h3>Platform</h3>\n              <p>\n                Tags and Elements are build for iOS and android devices. They\n                are also adaptable to web.\n              </p>\n              <h3>Contribution</h3>\n              <p>\n                You want to contribute to this project? Please to clone our\n                github repository and make the world a better place to live with\n                most sofisticated applications for our end-users.\n              </p>\n            </div>\n            <div className=\"col-md-6\">\n              <h3>\n                Build your native applications feeling like it's an html\n                applications\n              </h3>\n              <div className=\"snippet\">\n                <h4>Install</h4>\n                <div>\n                  <p className=\"code-snippet\">\n                    > npm install react-native-htmltags\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"about\">\n        <div className=\"container\">\n          <h3>Code React Native as Html</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <p>\n                This library is build to help developers have and use html-like\n                elements such as H1, H2, H3 and BodyText which they can also\n                customize and style in their own way.\n              </p>\n\n              <div className=\"code-shot\">\n                <img src=\"/assets/code2.png\" alt=\"code\" width=\"100%\" />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"demo-part\">\n                <img src=\"/assets/screen-shot.png\" alt=\"code\" width=\"100%\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"card-bottom\">\n        <div className=\"demo-part\">\n          <div className=\"container\">\n            <div className=\"card-bottom-text\">\n              <p>\n                React Native Html Tags's card elements can be found using{\" \"}\n                <span style={{ color: \"maroon\" }}>\n                  react-native-htmltags/elements\n                </span>{\" \"}\n                which you have when you run the npm install.\n              </p>\n              <p>\n                The CardWithRowBottom component has the following props:{\" \"}\n                <span style={{ color: \"maroon\" }}>\n                  title, titleBottom, imageUrl, onPress, children, style\n                </span>{\" \"}\n                which you can set at your convenience. Use the{\" \"}\n                <span>titleBottom</span> prop to align your title at the bottom\n                of the card image.\n              </p>\n              <p>\n                Children of CardWithRowBottom component are row aligned as you\n                can see in the code snipet bellow.\n              </p>\n            </div>\n\n            <img src=\"/assets/code-and-shot.png\" alt=\"code\" width=\"100%\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"card-demo\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <p>\n                React Native Html Card elements have some property you can set\n                up such{\" \"}\n                <span style={{ color: \"maroon\" }}>\n                  imageUrl, onPress, imageHeight, style.\n                </span>{\" \"}\n                The card component is used with the closing tags as shown the\n                code below.\n              </p>\n              <p>\n                Between the opening and closing tags, you can put in any type of\n                text using the library html-like which is made for you and\n                should be very easy to use.\n              </p>\n\n              <div className=\"code-shot\">\n                <img src=\"/assets/card-shot.png\" alt=\"code\" width=\"100%\" />\n              </div>\n              <p style={{ marginTop: \"15px;\" }}>\n                React Native Html Tags also have a customizable button which\n                have{\" \"}\n                <span style={{ color: \"maroon\" }}>\n                  {\" \"}\n                  onPress, style, title, icon, alignIconRight\n                </span>{\" \"}\n                as props. You can add a button icon which is by default align to\n                the left of the button. You can use{\" \"}\n                <span style={{ color: \"maroon\" }}> alignIconRight </span> props\n                to align the button icon to the right.\n              </p>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"demo-part\">\n                <img src=\"/assets/card-pic.png\" alt=\"code\" width=\"100%\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Footer.scss\";\n\nconst Footer = () => {\n  let date = new Date();\n  const currentYear = date.getFullYear();\n  return (\n    <div className=\"footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <h3>Developers</h3>\n            <hr />\n            <h5>Barel Musenga</h5>\n            <p>contact: barel@bmlcenter.com</p>\n            <h5>William Ntumba</h5>\n            <h5>Shemouel Mwambi</h5>\n          </div>\n          <div className=\"col-md-6\">\n            <h3>Resources</h3>\n            <hr />\n            <h5>\n              <Link className=\"nav-item nav-link\" to=\"/github\" target=\"_blank\">\n                GitHub\n              </Link>\n            </h5>\n          </div>\n        </div>\n        <hr />\n        <p className=\"text-center\">Copyright &copy; {currentYear}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport HomePage from \"./pages/home/HomePage\";\nimport Footer from \"./components/footer/Footer\";\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route\n          path=\"/github\"\n          component={() => {\n            window.location.href =\n              \"https://github.com/Barelmusenga/react-native-htmltags\";\n            return null;\n          }}\n        />\n      </Switch>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}